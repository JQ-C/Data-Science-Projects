{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d9d17c1f",
   "metadata": {},
   "source": [
    "## Useful info\n",
    "Source: https://www.kaggle.com/datasets/saurabhshahane/twitter-sentiment-dataset <br>Dataset info: three sentiments namely, negative(-1), neutral(0), and positive(+1). It contains two fields for the tweet and label."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "710d6881",
   "metadata": {},
   "source": [
    "## Importing Libraries separated into 4 cells for each basic import, matplotlib, nltk, & sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "611ff19e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "68119a68",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import style\n",
    "style.use('ggplot')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "41f45747",
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "\n",
    "import re\n",
    "import string\n",
    "from string import punctuation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1d2a9f6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45062708",
   "metadata": {},
   "source": [
    "## Reading the CSV file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "08ae9746",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>clean_text</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>when modi promised “minimum government maximum...</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>talk all the nonsense and continue all the dra...</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>what did just say vote for modi  welcome bjp t...</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>asking his supporters prefix chowkidar their n...</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>answer who among these the most powerful world...</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          clean_text  category\n",
       "0  when modi promised “minimum government maximum...      -1.0\n",
       "1  talk all the nonsense and continue all the dra...       0.0\n",
       "2  what did just say vote for modi  welcome bjp t...       1.0\n",
       "3  asking his supporters prefix chowkidar their n...       1.0\n",
       "4  answer who among these the most powerful world...       1.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('Twitter_Data.csv')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "717fe44b",
   "metadata": {},
   "source": [
    "## Renaming the column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a9cf928d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>when modi promised “minimum government maximum...</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>talk all the nonsense and continue all the dra...</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>what did just say vote for modi  welcome bjp t...</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>asking his supporters prefix chowkidar their n...</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>answer who among these the most powerful world...</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  category\n",
       "0  when modi promised “minimum government maximum...      -1.0\n",
       "1  talk all the nonsense and continue all the dra...       0.0\n",
       "2  what did just say vote for modi  welcome bjp t...       1.0\n",
       "3  asking his supporters prefix chowkidar their n...       1.0\n",
       "4  answer who among these the most powerful world...       1.0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.rename(columns = {'clean_text':'text'}, inplace = True)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f352a22",
   "metadata": {},
   "source": [
    "## Removing null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "59654e21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before removing null\n",
      "Dataset size: (162980, 2) \n",
      " text        4\n",
      "category    7\n",
      "dtype: int64\n",
      "--------------------------------------------\n",
      "After removing null\n",
      "Dataset size: (162969, 2) \n",
      " text        0\n",
      "category    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print('Before removing null\\nDataset size:',data.shape,'\\n',data.isnull().sum())\n",
    "data=data.dropna()\n",
    "print('--------------------------------------------')\n",
    "print('After removing null\\nDataset size:',data.shape,'\\n',data.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8a93c3f",
   "metadata": {},
   "source": [
    "## Removing duplicate value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0525d887",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before dropping duplicate values (162969, 2)\n",
      "--------------------------------------------\n",
      "After dropping duplicate values (162969, 2)\n"
     ]
    }
   ],
   "source": [
    "print('Before dropping duplicate values', data.shape)\n",
    "print('--------------------------------------------')\n",
    "data=data.drop_duplicates()\n",
    "print('After dropping duplicate values', data.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b4d9de6",
   "metadata": {},
   "source": [
    "## EDA for category in the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "538ef9eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"4\" halign=\"left\">text</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>unique</th>\n",
       "      <th>top</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>-1.0</th>\n",
       "      <td>35509</td>\n",
       "      <td>35509</td>\n",
       "      <td>when modi promised “minimum government maximum...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>55211</td>\n",
       "      <td>55211</td>\n",
       "      <td>talk all the nonsense and continue all the dra...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>72249</td>\n",
       "      <td>72249</td>\n",
       "      <td>what did just say vote for modi  welcome bjp t...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           text                                                               \n",
       "          count unique                                                top freq\n",
       "category                                                                      \n",
       "-1.0      35509  35509  when modi promised “minimum government maximum...    1\n",
       " 0.0      55211  55211  talk all the nonsense and continue all the dra...    1\n",
       " 1.0      72249  72249  what did just say vote for modi  welcome bjp t...    1"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.groupby('category').describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "16a3d691",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cat_count = data['category'].value_counts()\n",
    "cat_lab = [\"Positive\", \"Neutral\", \"Negative\"]\n",
    "cat_v = plt.pie(cat_count, labels = cat_lab)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "903f2066",
   "metadata": {},
   "source": [
    "## Text preprocessing\n",
    "1. Lowercasing the text \n",
    "2. Remove digits\n",
    "3. Remove punctuations\n",
    "4. Remove whitespace\n",
    "5. Remove emoji\n",
    "6. Remove HTML\n",
    "7. Remove quotes\n",
    "8. Lemmatizing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19edb385",
   "metadata": {},
   "source": [
    "## Defining list of text preprocessing functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6bbe961d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def text_preprocessing(text):\n",
    "    text = text.lower() #lowercasing the text\n",
    "    \n",
    "    text = re.sub(r'\\d+','',text) #remove digits\n",
    "    \n",
    "    text = [t for t in text if t not in punctuation]\n",
    "    text = \"\".join(text) #remove punctuations\n",
    "    \n",
    "    text = ' '.join([t for t in text.split()]) #remove whitespace\n",
    "    \n",
    "    emoji_pattern = re.compile(\n",
    "        '['\n",
    "        u'\\U0001F600-\\U0001F64F'  # emoticons\n",
    "        u'\\U0001F300-\\U0001F5FF'  # symbols & pictographs\n",
    "        u'\\U0001F680-\\U0001F6FF'  # transport & map symbols\n",
    "        u'\\U0001F1E0-\\U0001F1FF'  # flags (iOS)\n",
    "        u'\\U00002702-\\U000027B0'\n",
    "        u'\\U000024C2-\\U0001F251'\n",
    "        ']+',\n",
    "        flags=re.UNICODE)\n",
    "    text = re.sub(emoji_pattern,' ', text) #remove emoji\n",
    "    \n",
    "    html = re.compile(r'^[^ ]<.*?>|&([a-z0-9]+|#[0-9]\\\"\\'\\“{1,6}|#x[0-9a-f]{1,6});[^A-Za-z0-9]+')\n",
    "    text = re.sub(html, '', text) #remove html\n",
    "    \n",
    "    text = re.sub(r'[^A-Za-z0-9\\s]+', '', text) #remove quotes\n",
    "    \n",
    "    \n",
    "    lemmatizer = WordNetLemmatizer()\n",
    "    [lemmatizer.lemmatize(word) for word in text] #lemmatizing\n",
    "\n",
    "    return text"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5996d8bd",
   "metadata": {},
   "source": [
    "## Preprocessing texts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7cdba31b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>category</th>\n",
       "      <th>preproc_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>when modi promised “minimum government maximum...</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>when modi promised minimum government maximum ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>talk all the nonsense and continue all the dra...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>talk all the nonsense and continue all the dra...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>what did just say vote for modi  welcome bjp t...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>what did just say vote for modi welcome bjp to...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>asking his supporters prefix chowkidar their n...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>asking his supporters prefix chowkidar their n...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>answer who among these the most powerful world...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>answer who among these the most powerful world...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  category  \\\n",
       "0  when modi promised “minimum government maximum...      -1.0   \n",
       "1  talk all the nonsense and continue all the dra...       0.0   \n",
       "2  what did just say vote for modi  welcome bjp t...       1.0   \n",
       "3  asking his supporters prefix chowkidar their n...       1.0   \n",
       "4  answer who among these the most powerful world...       1.0   \n",
       "\n",
       "                                        preproc_text  \n",
       "0  when modi promised minimum government maximum ...  \n",
       "1  talk all the nonsense and continue all the dra...  \n",
       "2  what did just say vote for modi welcome bjp to...  \n",
       "3  asking his supporters prefix chowkidar their n...  \n",
       "4  answer who among these the most powerful world...  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['preproc_text'] = data['text'].apply(text_preprocessing)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "83d25b4a",
   "metadata": {},
   "source": [
    "## Train test split data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "15634bad",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = data.preproc_text\n",
    "y = data.category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "61d456e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b85c5715",
   "metadata": {},
   "source": [
    "## Implement Naive Bayes models with pipeline and gridsearch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7480cc73",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 48 candidates, totalling 240 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Jiaqi\\anaconda3\\lib\\site-packages\\sklearn\\naive_bayes.py:555: UserWarning: alpha too small will result in numeric errors, setting alpha = 1.0e-10\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5,\n",
       "             estimator=Pipeline(steps=[('vect',\n",
       "                                        CountVectorizer(max_features=10000)),\n",
       "                                       ('tfidf', TfidfTransformer()),\n",
       "                                       ('clf', MultinomialNB())]),\n",
       "             n_jobs=-1,\n",
       "             param_grid=[{'clf': [MultinomialNB(alpha=0)],\n",
       "                          'clf__alpha': [1, 0.1, 0.01, 0],\n",
       "                          'tfidf': [TfidfTransformer()],\n",
       "                          'tfidf__norm': ('l1', 'l2'),\n",
       "                          'tfidf__use_idf': (True, False),\n",
       "                          'vect': [CountVectorizer(max_features=10000,\n",
       "                                                   ngram_range=(1, 2))],\n",
       "                          'vect__ngram_range': [(1, 1), (1, 2), (2, 2)]}],\n",
       "             scoring='accuracy', verbose=1)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe = Pipeline([\n",
    "    ('vect', CountVectorizer(max_features=10000)),\n",
    "    ('tfidf', TfidfTransformer()),\n",
    "    ('clf', MultinomialNB())\n",
    "    ])\n",
    "\n",
    "pipe_param_grid = [\n",
    "    {\n",
    "    'vect' : [CountVectorizer(max_features=10000)],\n",
    "    'vect__ngram_range': [(1, 1), (1, 2), (2, 2)],\n",
    "    'tfidf' : [TfidfTransformer()],\n",
    "    'tfidf__use_idf': (True, False),\n",
    "    'tfidf__norm': ('l1', 'l2'),\n",
    "    'clf' : [MultinomialNB()], \n",
    "    'clf__alpha': [1, 1e-1, 1e-2, 0]\n",
    "}]\n",
    "\n",
    "pipe_gs = GridSearchCV(pipe, pipe_param_grid,\n",
    "cv=5, scoring=\"accuracy\",\n",
    "verbose = 1, n_jobs=-1)\n",
    "pipe_gs.fit(x, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0c71cf3",
   "metadata": {},
   "source": [
    "## Evaluating Naive Bayes models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "82843a1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best CountVectorizer parameter: (1, 2)\n",
      "Best Tranformer parameters: True l2\n",
      "Best classifier: MultinomialNB(alpha=0)\n",
      "Best Accuracy:\n",
      "0.7636605716027148\n"
     ]
    }
   ],
   "source": [
    "params = pipe_gs.best_params_\n",
    "print(\"Best CountVectorizer parameter:\", params[\"vect__ngram_range\"])\n",
    "print(\"Best Tranformer parameters:\", params[\"tfidf__use_idf\"], params[\"tfidf__norm\"])\n",
    "print(\"Best classifier:\", params[\"clf\"])\n",
    "print(\"Best Accuracy:\", pipe_gs.best_score_, sep='\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "19be00e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ConfusionMatrixDisplay.from_predictions(y_test, pipe_gs.predict(x_test))\n",
    "plt.grid(False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8f69f8fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.86      0.57      0.68      7152\n",
      "         0.0       0.90      0.76      0.83     11067\n",
      "         1.0       0.73      0.93      0.82     14375\n",
      "\n",
      "    accuracy                           0.80     32594\n",
      "   macro avg       0.83      0.75      0.78     32594\n",
      "weighted avg       0.81      0.80      0.79     32594\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,pipe_gs.predict(x_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "890f3962",
   "metadata": {},
   "source": [
    "## Implement KNN models with pipeline as a baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c3e0fca7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('vect', CountVectorizer(max_features=10000)),\n",
       "                ('tfidf', TfidfTransformer()),\n",
       "                ('clf', KNeighborsClassifier())])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe_knn = Pipeline([\n",
    "    ('vect', CountVectorizer(max_features=10000)),\n",
    "    ('tfidf', TfidfTransformer()),\n",
    "    ('clf', KNeighborsClassifier())\n",
    "    ])\n",
    "pipe_knn.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "036691b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ConfusionMatrixDisplay.from_predictions(y_test, pipe_knn.predict(x_test))\n",
    "plt.grid(False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "da9f656b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.82      0.09      0.16      7152\n",
      "         0.0       0.37      0.98      0.53     11067\n",
      "         1.0       0.91      0.13      0.23     14375\n",
      "\n",
      "    accuracy                           0.41     32594\n",
      "   macro avg       0.70      0.40      0.31     32594\n",
      "weighted avg       0.70      0.41      0.32     32594\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,pipe_knn.predict(x_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c17b254",
   "metadata": {},
   "source": [
    "## Check for overfitting and underfitting & Compare both model accuracy with null accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "94ef3a52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 4.92 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "train_MNB = pipe_gs.score(x_train, y_train)\n",
    "test_MNB = pipe_gs.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3737f64c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 10min 44s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "train_knn = pipe_knn.score(x_train, y_train)\n",
    "test_knn = pipe_knn.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c954cff7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set score for Naive Bayes: 0.8005\n",
      "Test set score for Naive Bayes: 0.7958\n",
      "Training set score for KNN: 0.4379\n",
      "Test set score for KNN: 0.4115\n",
      "Null accuracy score: 0.4433\n"
     ]
    }
   ],
   "source": [
    "print('Training set score for Naive Bayes: {:.4f}'.format(train_MNB))\n",
    "print('Test set score for Naive Bayes: {:.4f}'.format(test_MNB))\n",
    "print('Training set score for KNN: {:.4f}'.format(train_knn))\n",
    "print('Test set score for KNN: {:.4f}'.format(test_knn))\n",
    "null_accuracy= (72249/(72249+55211+35509))\n",
    "print('Null accuracy score: {0:0.4f}'. format(null_accuracy))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4f2e2b1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.lines.Line2D at 0x2538feebd90>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "score = {'Training NB' : 0.8005,\n",
    "        'Test NB' : 0.7958,\n",
    "        'Train KNN' : 0.4379,\n",
    "        'Test KNN' : 0.4115}\n",
    "x_info = list(score.keys())\n",
    "y_value = list(score.values())\n",
    "\n",
    "fig = plt.figure(figsize = (10, 5))\n",
    "\n",
    "plt.bar(x_info, y_value, color ='maroon',\n",
    "        width = 0.4)\n",
    "\n",
    "plt.axhline(y=0.4433, linewidth = 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c15b126",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
